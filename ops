{"version":1,"ops":[{"type":3,"author":{"id":"3c87de25ab8b2ec3449081ec888ea2a273bb79fc"},"timestamp":1566922171,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyNTM3MjQwMA==","github-url":"https://github.com/firecat53/keepmenu/issues/40#issuecomment-525372400"},"message":"Thanks for letting me know! I'll definitely try it out when I get a chance. I've always been a little frustrated with the opening delay.","files":null},{"type":3,"author":{"id":"3c87de25ab8b2ec3449081ec888ea2a273bb79fc"},"timestamp":1567013700,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyNTg0NTk0NA==","github-url":"https://github.com/firecat53/keepmenu/issues/40#issuecomment-525845944"},"message":"I'm having a chicken/egg problem. pykeepass_cache requires the password, but I typically prompt for the password only if the database isn't already open. So how can I supply the password to pykeepass_cache if the server is already running without prompting for it? The goal is to open the database on first run, prompting for the password if necessary but then being able to re-open keepmenu without the password as long as the timeout hasn't been reached.","files":null},{"type":3,"author":{"id":"db7ec667dfdbf2e433aa2f1182386927b0831322"},"timestamp":1567014288,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyNTg0OTY4Ng==","github-url":"https://github.com/firecat53/keepmenu/issues/40#issuecomment-525849686"},"message":"Use the cached_databases function to check if the database is already open\non the server.\nOn Aug 28, 2019 12:35 PM, \"Scott Hansen\" \u003cnotifications@github.com\u003e wrote:\n\n\u003e I'm having a chicken/egg problem. pykeepass_cache requires the password,\n\u003e but I typically prompt for the password only if the database isn't already\n\u003e open. So how can I supply the password to pykeepass_cache if the server is\n\u003e already running without prompting for it? The goal is to open the database\n\u003e on first run, prompting for the password if necessary but then being able\n\u003e to re-open keepmenu without the password as long as the timeout hasn't been\n\u003e reached.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you authored the thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/firecat53/keepmenu/issues/40?email_source=notifications\u0026email_token=ABJT7YK6XLFTA2XEUHPDK5TQG2ZMLA5CNFSM4IP744PKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD5L4LOA#issuecomment-525845944\u003e,\n\u003e or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/ABJT7YJ2UL2EILUPSDZFD6LQG2ZMLANCNFSM4IP744PA\u003e\n\u003e .\n\u003e","files":null},{"type":3,"author":{"id":"3c87de25ab8b2ec3449081ec888ea2a273bb79fc"},"timestamp":1567025067,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyNTkxNDk3Mg==","github-url":"https://github.com/firecat53/keepmenu/issues/40#issuecomment-525914972"},"message":"Sigh. Sorry. Dumb question.\n\nA request: would it be possible to add a method/call to shut down the server (close the database)?","files":null},{"type":3,"author":{"id":"3c87de25ab8b2ec3449081ec888ea2a273bb79fc"},"timestamp":1567029614,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyNTkzOTQ4OA==","github-url":"https://github.com/firecat53/keepmenu/issues/40#issuecomment-525939488"},"message":"Few more things after testing for awhile:\n\n- It actually adds a significantly noticeable delay to retrieving entries even after the db was open. Even just retrieving entries from my not too big keepass database in ipython ` %time print([i for i in kpo.entries])` took 3.71s (wall time). Regular pykeepass was 157ms.\n- Tends to crash on `EOFError: stream has been closed` after just a few calls.\n- Always crashes on first run with no db open yet on a `FileNotFoundError` (looks like for the socket)","files":null},{"type":3,"author":{"id":"db7ec667dfdbf2e433aa2f1182386927b0831322"},"timestamp":1567047792,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyNjAwMTQzNg==","github-url":"https://github.com/firecat53/keepmenu/issues/40#issuecomment-526001436"},"message":"\u003e It actually adds a significantly noticeable delay to retrieving entries even after the db was open. Even just retrieving entries from my not too big keepass database in ipython %time print([i for i in kpo.entries]) took 3.71s (wall time). Regular pykeepass was 157ms.\nHow many entries are in that database?  My database with 100 entries takes about 100ms.\n\u003e Tends to crash on EOFError: stream has been closed after just a few calls.\nThat happens when you access `kpo` after the server has shut down.  You need to delete the object before opening again.  I might be able to work around this, or at the very least raise a custom exception when the server is shut down.\n``` python\ndel kpo\nkpo = PyKeePass('test.kdbx', 'password', 'test.key')\n```\n\u003e Always crashes on first run with no db open yet on a FileNotFoundError (looks like for the socket)\nI haven't seen this.  Can you post some example code?","files":null},{"type":6,"author":{"id":"db7ec667dfdbf2e433aa2f1182386927b0831322"},"timestamp":1567047792,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDI3MDMwMjMwNg=="},"target":"95179f71f87812fe5544386ed06903f56be9d86f80d82db21db12325a406ae3b","message":"\u003e It actually adds a significantly noticeable delay to retrieving entries even after the db was open. \nEven just retrieving entries from my not too big keepass database in ipython %time print([i for i in kpo.entries]) took 3.71s (wall time). Regular pykeepass was 157ms.\n\nHow many entries are in that database?  My database with 100 entries takes about 100ms.\n\u003e Tends to crash on EOFError: stream has been closed after just a few calls.\n\nThat happens when you access `kpo` after the server has shut down.  You need to delete the object before opening again.  I might be able to work around this, or at the very least raise a custom exception when the server is shut down.\n``` python\ndel kpo\nkpo = PyKeePass('test.kdbx', 'password', 'test.key')\n```\n\u003e Always crashes on first run with no db open yet on a FileNotFoundError (looks like for the socket)\n\nI haven't seen this.  Can you post some example code?","files":null},{"type":3,"author":{"id":"3c87de25ab8b2ec3449081ec888ea2a273bb79fc"},"timestamp":1567119844,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyNjM5MzI2MQ==","github-url":"https://github.com/firecat53/keepmenu/issues/40#issuecomment-526393261"},"message":"\u003e How many entries are in that database? My database with 100 entries takes about 100ms.\n\u003e \n725\n\nIn ipython:\n\n    In [1]: %time print([i for i in kpo.entries])\n\nIt actually appears that the processing and printing are very fast, but there is a significant delay after the printing completes before the entire command finishes.\n\n\u003e That happens when you access `kpo` after the server has shut down. You need to delete the object before opening again. I might be able to work around this, or at the very least raise a custom exception when the server is shut down.\n\u003e\n\u003e \u003e Always crashes on first run with no db open yet on a FileNotFoundError (looks like for the socket)\n\u003e \n\u003e I haven't seen this. Can you post some example code?\n\nTo reproduce both these in ipython (ensure no existing db instances are open):\n\n    In [1]: from pykeepass_cache import PyKeePass \n    In [2]: kpo=PyKeePass(\"/home/user/passwords.kdbx\", password=\"password\", keyfile=\"/home/user/keyfile\")\n    ---------------------------------------------------------------------------                                                    [26/4720]\n    ConnectionRefusedError                    Traceback (most recent call last)                                                     \n    ~/docs/family/scott/src/projects/pykeepass_cache/pykeepass_cache/pykeepass_cache.py in _fork_and_run(func, timeout, socket_path)\n         93     try:                 \n    ---\u003e 94         conn = unix_connect(socket_path)    \n         95         return func(conn)                                   \n                                      \n    ~/.local/lib/python3.7/site-packages/rpyc/utils/factory.py in unix_connect(path, service, config)\n        111     \"\"\"                                                                                                                         \n    --\u003e 112     s = SocketStream.unix_connect(path)\n        113     return connect_stream(s, service, config)\n                                                                        \n    ~/.local/lib/python3.7/site-packages/rpyc/core/stream.py in unix_connect(cls, path, timeout)\n        184             s.settimeout(timeout)\n    --\u003e 185             s.connect(path)\n        186             return cls(s)                                                                                                       \n                                      \n    ConnectionRefusedError: [Errno 111] Connection refused\n                                                                        \n    During handling of the above exception, another exception occurred:\n                                                                        \n    FileNotFoundError                         Traceback (most recent call last)\n    \u003cipython-input-2-3863a71dd4ec\u003e in \u003cmodule\u003e\n    ----\u003e 1 kpo=PyKeePass(\"/home/firecat53/passwords.kdbx\", password=\"password\", keyfile=\"/home/firecat53/keyfile\")\n\n    ~/docs/family/scott/src/projects/pykeepass_cache/pykeepass_cache/pykeepass_cache.py in PyKeePass(filename, password, keyfile, transforme\n    d_key, timeout, socket_path)\n        174 \n        175     func = lambda conn: conn.root.PyKeePass(filename, password, keyfile, transformed_key)\n    --\u003e 176     return _fork_and_run(func, timeout=timeout, socket_path=socket_path)\n\n    ~/docs/family/scott/src/projects/pykeepass_cache/pykeepass_cache/pykeepass_cache.py in _fork_and_run(func, timeout, socket_path)\n        129             # maybe wait for existence of socket_path\n        130             time.sleep(1)\n    --\u003e 131             conn = unix_connect(socket_path)\n        132             return func(conn)\n        133 \n\n    ~/.local/lib/python3.7/site-packages/rpyc/utils/factory.py in unix_connect(path, service, config)\n        110     :returns: an RPyC connection\n        111     \"\"\"\n    --\u003e 112     s = SocketStream.unix_connect(path)\n        113     return connect_stream(s, service, config)\n        114 \n\n    ~/.local/lib/python3.7/site-packages/rpyc/core/stream.py in unix_connect(cls, path, timeout)\n        183         try:\n        184             s.settimeout(timeout)\n    --\u003e 185             s.connect(path)\n        186             return cls(s)\n        187         except BaseException:\n\n    FileNotFoundError: [Errno 2] No such file or directory\n    \n    In [3]: kpo=PyKeePass(\"/home/user/passwords.kdbx\", password=\"password\", keyfile=\"/home/user/keyfile\")\n    In [4]: %time print([i for i in kpo.entries]) \n    ...... Lots of output\n    CPU times: user 354 ms, sys: 43.2 ms, total: 397 ms Wall time: 3.73 s\n\nRunning it a second time in a row:\n\n    In [5]: %time print([i for i in kpo.entries])                                                                                  [36/4578]\n    ---------------------------------------------------------------------------\n    EOFError                                  Traceback (most recent call last)                                \n    \u003ctimed eval\u003e in \u003cmodule\u003e                                            \n                                      \n    ~/.local/lib/python3.7/site-packages/rpyc/core/netref.py in __getattribute__(self, name)\n        159             return object.__getattribute__(self, \"__array__\")\n        160         else:\n    --\u003e 161             return syncreq(self, consts.HANDLE_GETATTR, name)\n        162 \n        163     def __getattr__(self, name):\n\n    ~/.local/lib/python3.7/site-packages/rpyc/core/netref.py in syncreq(proxy, handler, *args)\n         74     \"\"\"\n         75     conn = object.__getattribute__(proxy, \"____conn__\")\n    ---\u003e 76     return conn.sync_request(handler, proxy, *args)\n         77 \n         78 \n\n    ~/.local/lib/python3.7/site-packages/rpyc/core/protocol.py in sync_request(self, handler, *args)\n        456         \"\"\"\n        457         timeout = self._config[\"sync_request_timeout\"]\n    --\u003e 458         return self.async_request(handler, *args, timeout=timeout).value\n        459 \n        460     def _async_request(self, handler, args=(), callback=(lambda a, b: None)):  # serving\n\n    ~/.local/lib/python3.7/site-packages/rpyc/core/protocol.py in async_request(self, handler, *args, **kwargs)\n        477             raise TypeError(\"got unexpected keyword argument(s) %s\" % (list(kwargs.keys()),))\n        478         res = AsyncResult(self)\n    --\u003e 479         self._async_request(handler, args, res)\n        480         if timeout is not None:\n        481             res.set_expiry(timeout)\n    ~/.local/lib/python3.7/site-packages/rpyc/core/protocol.py in _async_request(self, handler, args, callback)                     [3/4578]\n        462         self._request_callbacks[seq] = callback\n        463         try:\n    --\u003e 464             self._send(consts.MSG_REQUEST, seq, (handler, self._box(args)))\n        465         except Exception:\n        466             self._request_callbacks.pop(seq, None)\n\n    ~/.local/lib/python3.7/site-packages/rpyc/core/protocol.py in _send(self, msg, seq, args)\n        257                     continue\n        258                 data = self._send_queue.pop(0)\n    --\u003e 259                 self._channel.send(data)\n        260             finally:\n        261                 self._sendlock.release()\n\n    ~/.local/lib/python3.7/site-packages/rpyc/core/channel.py in send(self, data)\n         73         header = self.FRAME_HEADER.pack(len(data), compressed)\n         74         buf = header + data + self.FLUSHER\n    ---\u003e 75         self.stream.write(buf)\n\n    ~/.local/lib/python3.7/site-packages/rpyc/core/stream.py in write(self, data)\n        265         try:\n        266             while data:\n    --\u003e 267                 count = self.sock.send(data[:self.MAX_IO_CHUNK])\n        268                 data = data[count:]\n        269         except socket.error:\n\n    ~/.local/lib/python3.7/site-packages/rpyc/core/stream.py in __getattr__(self, name)\n         92         if name.startswith(\"__\"):  # issue 71\n         93             raise AttributeError(\"stream has been closed\")\n    ---\u003e 94         raise EOFError(\"stream has been closed\")\n         95 \n         96     def close(self):\n\n    EOFError: stream has been closed\n\n\nIt also appears that the server instance is staying running in the background\neven when the timeout is expired.","files":null},{"type":3,"author":{"id":"db7ec667dfdbf2e433aa2f1182386927b0831322"},"timestamp":1567745288,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyODcwNjUwNQ==","github-url":"https://github.com/firecat53/keepmenu/issues/40#issuecomment-528706505"},"message":"The first issue with `FileNotFoundError` should be fixed now.\n\n\u003e It also appears that the server instance is staying running in the background even when the timeout is expired.\n\nIt seems to work for me\n\n```python\nimport subprocess                                                                                                   \nfrom pykeepass_cache import PyKeePass                                                                               \nimport time                                                                                                         \n                                                                                                                    \nprint('-------------- server running, socket should exist ------------------')                                      \nkp = PyKeePass('test3.kdbx', 'password', 'test3.key', timeout=5)                                                    \nprint(subprocess.run('lsof /tmp/pykeepass.sock', shell=True))                                                       \n                                                                                                                    \ntime.sleep(6)                                                                                                       \nprint('-------------- server not running, socket should not exist ------------------')                              \nprint(subprocess.run('lsof /tmp/pykeepass.sock', shell=True))                                                       \n```\n\n```\n[evan@blackbox tmp] python test.py\n-------------- server running, socket should exist ------------------\nCOMMAND   PID USER   FD   TYPE             DEVICE SIZE/OFF    NODE NAME\npython  12062 evan    3u  unix 0x00000000cd53dc26      0t0 1187577 /tmp/pykeepass.sock type=STREAM\npython  12062 evan    4u  unix 0x000000007b662acf      0t0 1187579 /tmp/pykeepass.sock type=STREAM\nCompletedProcess(args='lsof /tmp/pykeepass.sock', returncode=0)\n-------------- server not running, socket should not exist ------------------\nlsof: status error on /tmp/pykeepass.sock: No such file or directory\nlsof 4.91\n latest revision: ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/\n latest FAQ: ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/FAQ\n latest man page: ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/lsof_man\n usage: [-?abhKlnNoOPRtUvVX] [+|-c c] [+|-d s] [+D D] [+|-E] [+|-e s] [+|-f[gG]]\n [-F [f]] [-g [s]] [-i [i]] [+|-L [l]] [+m [m]] [+|-M] [-o [o]] [-p s]\n [+|-r [t]] [-s [p:s]] [-S [t]] [-T [t]] [-u s] [+|-w] [-x [fl]] [--] [names]\nUse the ``-h'' option to get more help information.\nCompletedProcess(args='lsof /tmp/pykeepass.sock', returncode=1)\n```","files":null},{"type":6,"author":{"id":"db7ec667dfdbf2e433aa2f1182386927b0831322"},"timestamp":1567745288,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDI3NDI3NjcyNw=="},"target":"9c02e46cfbb2f4111f481cc35fc3626fc65f6b05278b2f2f74ac6866ae5c1d83","message":"The first issue with `FileNotFoundError` should be fixed now: https://github.com/Evidlo/pykeepass_cache/commit/31012f571b8471c6eedae01f9027bff086ed3e6b\n\n\u003e It also appears that the server instance is staying running in the background even when the timeout is expired.\n\nIt seems to work for me\n\n```python\nimport subprocess                                                                                                   \nfrom pykeepass_cache import PyKeePass                                                                               \nimport time                                                                                                         \n                                                                                                                    \nprint('-------------- server running, socket should exist ------------------')                                      \nkp = PyKeePass('test3.kdbx', 'password', 'test3.key', timeout=5)                                                    \nprint(subprocess.run('lsof /tmp/pykeepass.sock', shell=True))                                                       \n                                                                                                                    \ntime.sleep(6)                                                                                                       \nprint('-------------- server not running, socket should not exist ------------------')                              \nprint(subprocess.run('lsof /tmp/pykeepass.sock', shell=True))                                                       \n```\n\n```\n[evan@blackbox tmp] python test.py\n-------------- server running, socket should exist ------------------\nCOMMAND   PID USER   FD   TYPE             DEVICE SIZE/OFF    NODE NAME\npython  12062 evan    3u  unix 0x00000000cd53dc26      0t0 1187577 /tmp/pykeepass.sock type=STREAM\npython  12062 evan    4u  unix 0x000000007b662acf      0t0 1187579 /tmp/pykeepass.sock type=STREAM\nCompletedProcess(args='lsof /tmp/pykeepass.sock', returncode=0)\n-------------- server not running, socket should not exist ------------------\nlsof: status error on /tmp/pykeepass.sock: No such file or directory\nlsof 4.91\n latest revision: ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/\n latest FAQ: ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/FAQ\n latest man page: ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/lsof_man\n usage: [-?abhKlnNoOPRtUvVX] [+|-c c] [+|-d s] [+D D] [+|-E] [+|-e s] [+|-f[gG]]\n [-F [f]] [-g [s]] [-i [i]] [+|-L [l]] [+m [m]] [+|-M] [-o [o]] [-p s]\n [+|-r [t]] [-s [p:s]] [-S [t]] [-T [t]] [-u s] [+|-w] [-x [fl]] [--] [names]\nUse the ``-h'' option to get more help information.\nCompletedProcess(args='lsof /tmp/pykeepass.sock', returncode=1)\n```","files":null}]}